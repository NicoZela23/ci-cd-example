name: Vercel Production Deployment

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  Test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        id: test-step
        continue-on-error: true
        run: |
          npm test -- --coverage
          echo "TESTS_FAILED=$?" >> $GITHUB_ENV

      - name: Generate Coverage Badge
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
            const percentage = coverage.total.statements.pct;
            const color = percentage > 80 ? 'green' : percentage > 60 ? 'yellow' : 'red';

            const comment = `## Test Coverage Report
            ![Coverage](https://img.shields.io/badge/coverage-${percentage}%25-${color})

            | Type | Percentage | Covered/Total |
            |------|------------|---------------|
            | Statements | ${coverage.total.statements.pct}% | ${coverage.total.statements.covered}/${coverage.total.statements.total} |
            | Branches | ${coverage.total.branches.pct}% | ${coverage.total.branches.covered}/${coverage.total.branches.total} |
            | Functions | ${coverage.total.functions.pct}% | ${coverage.total.functions.covered}/${coverage.total.functions.total} |
            | Lines | ${coverage.total.lines.pct}% | ${coverage.total.lines.covered}/${coverage.total.lines.total} |

            ${process.env.TESTS_FAILED === '0' ? '✅ All tests passed' : '❌ Some tests failed'}`;

            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: comment
              });
            }

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/

  Deploy-Production:
    needs: Test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Vercel CLI
        run: npm install --global vercel

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
